# face verification with the VGGFace2 model
import base64
import io
import time
from datetime import datetime as dt
import cv2
from PIL import Image
import numpy as np
from scipy.spatial.distance import cosine

from keras_vggface.vggface import VGGFace
from keras_vggface.utils import preprocess_input


def get_embedding(faces):
    samples = np.asarray(faces, 'float32')
    # prepare the face for the model, e.g. center pixels
    samples = preprocess_input(samples, version=2)
    # create a vggface model
    model = VGGFace(model='resnet50', include_top=False, input_shape=(224, 224, 3), pooling='avg')
    # perform prediction
    yhat = model.predict(samples)
    return yhat[0]


# determine if a candidate face is a match for a known face
def is_match(known_embedding, candidate_embedding, thresh=0.5):
    # calculate distance between embeddings
    score = cosine(known_embedding, candidate_embedding)
    if score <= thresh:
        print('>face is a Match (%.3f <= %.3f)' % (score, thresh))
    else:
        print('>face is NOT a Match (%.3f > %.3f)' % (score, thresh))

# define filenames

# get embeddings file filenames
# img1 = cv2.imread('IMG_2.jpeg')
# ret, ext = cv2.imencode('.jpeg', img1)
# im = ext.tobytes()
#
# print(str(base64.b64encode(im).decode('utf-8')))

img2 = cv2.imread('test.jpg')
base64_image = ''
file_like = io.BytesIO(base64.b64decode(base64_image))
image_input = Image.open(file_like)


frame = np.array(image_input)
frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

# img1 = cv2.resize(img1, (224, 224))
img2 = cv2.resize(img2, (224, 224))
frame = cv2.resize(frame, (224, 224))
cv2.imshow("x", frame)
cv2.waitKey(0)
#
#
# # print(type(img2))
#
files = []
files.append(frame)
files.append(img2)

embeddings = get_embedding(files)
start_time = time.time()
is_match(embeddings[0], embeddings[1])
print(time.time() - start_time)
print(dt.now().year)
# # define sharon stone
# sharon_id = embeddings[0]
# # verify known photos of sharon
# print('Positive Tests')
# is_match(embeddings[0], embeddings[1])
# # is_match(embeddings[0], embeddings[2])
# # verify known photos of other people
#
# is_match(embeddings[0], embeddings[2])
